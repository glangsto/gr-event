/* -*- c++ -*- */
/* 
 * Copyright 2019 Glen Langston; Quiet Skies LLC
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "event_detect.h"
#include <iostream>
#include <stdio.h>

namespace gr {
  namespace radio_astro {

    event::sptr
    event::make(int vlen, float n_sigma, float bw_hz, float dt, int mode)
    {
      return gnuradio::get_initial_sptr
        (new event_detect_impl(vlen, n_sigma, bw_hz, dt, mode));
    }

    /*
     * The private constructor
     */
    event_detect_impl::event_detect_impl(int vlen, float n_sigma, float bw_hz, float dt, int mode)
      : gr::block("event",
		  gr::io_signature::make(1, 1, sizeof(gr_complex)*vlen),
		  gr::io_signature::make(1, 1, sizeof(gr_complex)*vlen)),
        d_vlen(vlen),
	d_n_sigma(n_sigma),
	d_bw_hz(bw_hz),
	d_dt(dt),
	d_mode(mode)
    {}

    /*
     * Our virtual destructor.
     */
    event_detect_impl::~event_detect_impl()
    {
    }

    void
    event_detect_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
    {
      /* <+forecast+> e.g. ninput_items_required[0] = noutput_items */
      unsigned ninputs = ninput_items_required.size();

      for(unsigned int i = 0; i < ninputs; i++)
       	    ninput_items_required[i] = noutput_items;
    }

    int
    event_detect_impl::general_work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
      const gr_complex *in = (const gr_complex *) input_items[0];
      gr_complex *out = (gr_complex *) output_items[0];
      int success;

      success = detect(d_vlen, d_n_sigma, in, out);
      std::cout << success;
      //std::cout << out[0*d_dms+ 0] << " " << out[31*d_dms+49] <<"\n";

      // Do <+signal processing+>
      // Tell runtime system how many input items we consumed on
      // each input stream.
      consume_each (noutput_items);

      // Tell runtime system how many output items we produced.
      return noutput_items;
    }
    
    int
    event_detect_impl::detect(int vlen, float n_simga, const gr_complex *input, gr_complex *output)
    { int i = 0, imax = 0;
      double sum2 = 0, rms = 0, rp = 0, ip = 0, maxmag2 = 0, mag2 = 0, npeak=0.;

      for (i = 0; i < vlen; i++)
	{ rp = input[i].real();
	  ip = input[i].imag();
	  output[i] = input[i];
	  mag2 = (rp*rp) + (ip*ip);
	  sum2 += mag2;
	  if (mag2 > maxmag2) {
	    maxmag2 = mag2;
	    imax = i;
	  }
	}
      rms = sqrt(sum2);
      // if rms is non-zero
      if (rms > 0.)
	{ // determine peak magnitude
	  npeak = sqrt(maxmag2)/rms;
	  if (npeak > 3.)
	    { 
	      printf( "N-sigma Peak found %7.1f\n", npeak);
	    }
	}
      
      return 0;
    }

  } /* namespace radio_astro */
} /* namespace gr */

